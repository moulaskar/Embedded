diff -ruN gem5/src/cpu/pred/BranchPredictor.py gem5-cse-ca/src/cpu/pred/BranchPredictor.py
--- gem5/src/cpu/pred/BranchPredictor.py	2019-05-20 10:45:07.000000000 -0700
+++ gem5-cse-ca/src/cpu/pred/BranchPredictor.py	2019-06-12 18:13:11.102535210 -0700
@@ -76,6 +76,26 @@
     choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")
     choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")
 
+class GshareBP(BranchPredictor):
+    type = 'GshareBP'
+    cxx_class = 'GshareBP'
+    cxx_header = "cpu/pred/gshare.hh"
+
+    PHTPredictorSize = Param.Unsigned(16384, "Size of local predictor")
+    PHTCtrBits = Param.Unsigned(2, "Bits per counter")
+    globalPredictorSize = Param.Unsigned('16', "Size of global Predictor")
+
+class Gshare8KBP(GshareBP):
+
+    PHTPredictorSize = Param.Unsigned(4096, "Size of local predictor")
+    PHTCtrBits = Param.Unsigned(2, "Bits per counter")
+    globalPredictorSize = Param.Unsigned('12', "Size of global Predictor")
+
+class Gshare32KBP(GshareBP):
+
+    PHTPredictorSize = Param.Unsigned(16384, "Size of local predictor")
+    PHTCtrBits = Param.Unsigned(2, "Bits per counter")
+    globalPredictorSize = Param.Unsigned('16', "Size of global Predictor")
 
 class BiModeBP(BranchPredictor):
     type = 'BiModeBP'
diff -ruN gem5/src/cpu/pred/gshare.cc gem5-cse-ca/src/cpu/pred/gshare.cc
--- gem5/src/cpu/pred/gshare.cc	1969-12-31 17:00:00.000000000 -0700
+++ gem5-cse-ca/src/cpu/pred/gshare.cc	2019-06-13 14:02:07.963533915 -0700
@@ -0,0 +1,212 @@
+/*
+ * Copyright (c) 2011, 2014 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2004-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Author: Moumita Laskar
+ */
+
+#include "cpu/pred/gshare.hh"
+
+#include "base/bitfield.hh"
+#include "base/intmath.hh"
+GshareBP::GshareBP(const GshareBPParams *params)
+    : BPredUnit(params),
+      globalHistory(params->numThreads, 0),
+      globalHistoryBits(params->globalPredictorSize),
+      phtPredictorSize(params->PHTPredictorSize),
+      phtPredictorCtrBits(params->PHTCtrBits)
+{
+
+    if (!isPowerOf2(phtPredictorSize)) {
+        fatal("Invalid PHTPredictor size!\n");
+    }
+
+    // Set up phtPredictorMask
+    // this is equivalent to mask(log2(phtPredictorSize)
+    phtPredictorMask = phtPredictorSize - 1;
+
+    //Setup the array of counters for the PHTPredictor
+    phtPredictorCtrs.resize(phtPredictorSize);
+
+    for (int i = 0; i < phtPredictorSize; ++i)
+        phtPredictorCtrs[i].setBits(phtPredictorCtrBits);
+    
+
+    // Set thresholds for the predictors' counters
+    // This is equivalent to (2^(Ctr))/2 - 1
+    phtPredictorThreshold = (ULL(1) << (phtPredictorCtrBits - 1)) - 1;
+  
+    //Set up history register mask
+    historyRegisterMask = mask(globalHistoryBits);
+}
+
+inline
+unsigned
+GshareBP::calBranchcIdx(Addr &branch_addr)
+{
+    // Get low order bits after removing instruction offset.
+    return (branch_addr >> instShiftAmt) & historyRegisterMask;
+}
+
+inline
+void
+GshareBP::updateGlobalHistTaken(ThreadID tid)
+{
+    globalHistory[tid] = (globalHistory[tid] << 1) | 1;
+    globalHistory[tid] = globalHistory[tid] & historyRegisterMask;
+}
+
+inline
+void
+GshareBP::updateGlobalHistNotTaken(ThreadID tid)
+{
+    globalHistory[tid] = (globalHistory[tid] << 1);
+    globalHistory[tid] = globalHistory[tid] & historyRegisterMask;
+}
+
+void
+GshareBP::btbUpdate(ThreadID tid, Addr branch_addr, void * &bp_history)
+{
+    globalHistory[tid] &= (historyRegisterMask & ~ULL(1));
+}
+
+bool
+GshareBP::lookup(ThreadID tid, Addr branch_addr, void * &bp_history)
+{
+
+    //Lookup to get its branch 
+    unsigned  branchIdx  = calBranchcIdx(branch_addr);
+
+    
+    unsigned phtPredictionIdx = (globalHistory[tid] & historyRegisterMask) ^ branchIdx;
+
+    //Lookup in the PHTpredictor to see which one to use
+    bool prediction = phtPredictorThreshold <
+      phtPredictorCtrs[phtPredictionIdx & phtPredictorMask].read();
+
+    // Create BPHistory and pass it back to be recorded.
+    BPHistory *history = new BPHistory;
+    history->globalHistory = globalHistory[tid] & historyRegisterMask;
+    bp_history = (void *)history;
+
+    if (prediction) 
+    {
+         updateGlobalHistTaken(tid);
+         return true;
+     } 
+     else 
+     {
+         updateGlobalHistNotTaken(tid);
+         return false;
+     }
+
+}
+
+void
+GshareBP::uncondBranch(ThreadID tid, Addr pc, void * &bp_history)
+{
+
+    // Create BPHistory and pass it back to be recorded.
+    BPHistory *history = new BPHistory;
+    history->globalHistory = globalHistory[tid] & historyRegisterMask;
+    bp_history = static_cast<void *>(history);
+
+    updateGlobalHistTaken(tid);
+}
+
+void
+GshareBP::update(ThreadID tid, Addr branch_addr, bool taken,
+                     void *bp_history, bool squashed)
+{
+    assert(bp_history);
+
+    BPHistory *history = static_cast<BPHistory *>(bp_history);
+
+    unsigned branchIdx = calBranchcIdx(branch_addr);
+
+    if (squashed) {
+        // Global history restore and update
+        globalHistory[tid] = (history->globalHistory << 1) | taken;
+        globalHistory[tid] &= historyRegisterMask;
+
+        return;
+    }
+
+    // there was a prediction.
+    unsigned phtPredictorIdx = (branchIdx ^ history->globalHistory) & phtPredictorMask;
+    if(taken)
+    {
+        phtPredictorCtrs[phtPredictorIdx].increment();
+    }
+    else
+    {
+        phtPredictorCtrs[phtPredictorIdx].decrement();
+    }
+
+    // We're done with this history, now delete it.
+    delete history;
+}
+
+void
+GshareBP::squash(ThreadID tid, void *bp_history)
+{
+
+    BPHistory *history = static_cast<BPHistory *>(bp_history);
+
+    // Restore global history to state prior to this branch.
+    globalHistory[tid] = history->globalHistory;
+
+    delete history;
+}
+
+GshareBP*
+GshareBPParams::create()
+{
+    return new GshareBP(this);
+}
+
+unsigned
+GshareBP::getGHR(ThreadID tid, void *bp_history) const
+{
+    return static_cast<BPHistory *>(bp_history)->globalHistory;
+}
+
+#ifdef DEBUG
+int
+GshareBP::BPHistory::newCount = 0;
+#endif
diff -ruN gem5/src/cpu/pred/gshare.hh gem5-cse-ca/src/cpu/pred/gshare.hh
--- gem5/src/cpu/pred/gshare.hh	1969-12-31 17:00:00.000000000 -0700
+++ gem5-cse-ca/src/cpu/pred/gshare.hh	2019-06-13 14:01:43.778277966 -0700
@@ -0,0 +1,176 @@
+/*
+ * Copyright (c) 2011, 2014 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2004-2006 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Moumita Laskar
+ */
+
+#ifndef __CPU_PRED_GSHAREBP_PRED_HH__
+#define __CPU_PRED_GSHAREBP_PRED_HH__
+
+#include <vector>
+
+#include "base/types.hh"
+#include "cpu/pred/bpred_unit.hh"
+#include "cpu/pred/sat_counter.hh"
+#include "params/GshareBP.hh"
+
+/**
+ * Implements a  branch predictor. 
+ * The branch address is XOR with the global history to get the index
+ * of the PHTPredictor counter to get the prediction whether the branch 
+ * should be taken or not.The prediction couter is in an N bit Branch 
+ * predictor.
+ */
+class GshareBP : public BPredUnit
+{
+  public:
+    /**
+     * Default branch predictor constructor.
+     */
+    GshareBP(const GshareBPParams *params);
+
+    /**
+     * Looks up the given address in the branch predictor and returns
+     * a true/false value as to whether it is taken.  Also creates a
+     * BPHistory object to store any state it will need on squash/update.
+     * @param branch_addr The address of the branch to look up.
+     * @param bp_history Pointer that will be set to the BPHistory object.
+     * @return Whether or not the branch is taken.
+     */
+    bool lookup(ThreadID tid, Addr branch_addr, void * &bp_history);
+
+    /**
+     * Records that there was an unconditional branch, and modifies
+     * the bp history to point to an object that has the previous
+     * global history stored in it.
+     * @param bp_history Pointer that will be set to the BPHistory object.
+     */
+    void uncondBranch(ThreadID tid, Addr pc, void * &bp_history);
+    /**
+     * Updates the branch predictor to Not Taken if a BTB entry is
+     * invalid or not found.
+     * @param branch_addr The address of the branch to look up.
+     * @param bp_history Pointer to any bp history state.
+     * @return Whether or not the branch is taken.
+     */
+    void btbUpdate(ThreadID tid, Addr branch_addr, void * &bp_history);
+    /**
+     * Updates the branch predictor with the actual result of a branch.
+     * @param branch_addr The address of the branch to update.
+     * @param taken Whether or not the branch was taken.
+     * @param bp_history Pointer to the BPHistory object that was created
+     * when the branch was predicted.
+     * @param squashed is set when this function is called during a squash
+     * operation.
+     */
+    void update(ThreadID tid, Addr branch_addr, bool taken, void *bp_history,
+                bool squashed);
+
+    /**
+     * Restores the global branch history on a squash.
+     * @param bp_history Pointer to the BPHistory object that has the
+     * previous global branch history in it.
+     */
+    void squash(ThreadID tid, void *bp_history);
+
+    unsigned getGHR(ThreadID tid, void *bp_history) const;
+
+  private:
+
+    /**
+     * Returns the branch_addr shifted by 2 and masked index, given a branch address.
+     * @param branch_addr The branch's PC address.
+     */
+    inline unsigned calBranchcIdx(Addr &branch_addr);
+
+    /** Updates global history as taken. */
+    inline void updateGlobalHistTaken(ThreadID tid);
+
+    /** Updates global history as not taken. */
+    inline void updateGlobalHistNotTaken(ThreadID tid);
+
+
+    /**
+     * The branch history information that is created upon predicting
+     * a branch.  It will be passed back upon updating and squashing,
+     * when the BP can use this information to update/restore its
+     * state properly.
+     */
+    struct BPHistory {
+#ifdef DEBUG
+        BPHistory()
+        { newCount++; }
+        ~BPHistory()
+        { newCount--; }
+
+        static int newCount;
+#endif
+        unsigned globalHistory;
+    };
+
+    /** Global history register. Contains as much history as specified by
+     *  historyRegisterMask. */
+    std::vector<unsigned> globalHistory;
+
+    /** Number of bits for global history */
+    unsigned globalHistoryBits;
+
+    /** Mask to apply to PHTPredictorTable*/
+    unsigned phtPredictorMask;
+
+    /** Mask to control how much history is stored. All of it might not be
+     *  used. */
+    unsigned historyRegisterMask;
+
+    /** Array of counters that make up the PHTPredictor Table. */
+    std::vector<SatCounter> phtPredictorCtrs;
+
+    /** Number of entries in the PHTPredictor table. */
+    unsigned phtPredictorSize;
+
+    /** Number of bits in the PHTPredictor's counters. */
+    unsigned phtPredictorCtrBits;
+
+    /** Thresholds for the counter value; above the threshold is taken,
+     *  equal to or below the threshold is not taken.
+     */
+    unsigned phtPredictorThreshold;
+};
+
+#endif // __CPU_PRED_GSHAREBP_PRED_HH__
diff -ruN gem5/src/cpu/pred/SConscript gem5-cse-ca/src/cpu/pred/SConscript
--- gem5/src/cpu/pred/SConscript	2019-05-20 10:44:44.000000000 -0700
+++ gem5-cse-ca/src/cpu/pred/SConscript	2019-06-12 18:52:44.691476075 -0700
@@ -42,6 +42,7 @@
 Source('indirect.cc')
 Source('ras.cc')
 Source('tournament.cc')
+Source('gshare.cc')
 Source ('bi_mode.cc')
 Source('tage.cc')
 Source('ltage.cc')
